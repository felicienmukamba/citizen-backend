package com.soside.backend.models;
import com.soside.backend.enums.ContractType;
import com.soside.backend.enums.MarriageType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import java.time.LocalDate;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "marriage_record")
public class MarriageRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Partner 1
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "partner1_id", nullable = false)
    private Person partner1;

    // Partner 2
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "partner2_id", nullable = false)
    private Person partner2;

    // Place of marriage
    @Column(nullable = false)
    private String marriagePlace;

    // Date of marriage
    @Column(nullable = false)
    private LocalDate marriageDate;

    // Officiant of the marriage
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "officiant", nullable = false)
    private Person officiant;

    // Witness 1
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "witness1_id", nullable = false)
    private Person witness1;

    // Witness 2
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "witness2_id", nullable = false)
    private Person witness2;

    // Witness 3 (optional)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "witness3_id")
    private Person witness3;

    // Type of marriage (enum)
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private MarriageType marriageType;

    // Type of contract (enum)
    @Enumerated(EnumType.STRING)
    private ContractType contractType;

    // Previous marriages (optional, can be a string or another linked entity)
    private String previousMarriages;

    // Getters and Setters generated by Lombok
}
